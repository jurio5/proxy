public class AopText {
    /**
     * ### AOP 적용 위치
     *
     * - AOP를 적용할 수 있는 지점을 적용 가능 지점(조인 포인트, Join Point) 라고 하는데, AspectJ를 사용해서 컴파일 시점과 클래스 로딩 시점에 적용하는 AOP는 바이트코드를 실제로 조작하기 때문에 해당 기능을 모든 지점에 다 적용할 수 있다.
     * - 그러나, 프록시 방식을 사용하는 스프링 AOP는 메서드 실행 지점에만 AOP를 적용 할 수 있다.
     * 	- 프록시는 메서드 오버라이딩 개념으로 동작하기 때문에 생성자나 정적 메서드, 필드 값 접근에는 프록시 개념이 적용 될 수 없다.
     * 	- 프록시를 사용하는 **스프링 AOP의 조인 포인트는 메서드 실행으로 제한**된다.
     * 	- 즉, 프록시 방식을 사용하는 스프링 AOP는 스프링 컨테이너가 관리할 수 있는 **스프링 빈에만 AOP를 적용**할 수 있다.
     *
     * - 컴파일 시점과 클래스 로딩 시점에 적용하는 방식에 비해 런타임 방식의 AOP는 조인 포인트의 문제도 그렇고 제한적인 문제들도 있어서 다른 두 가지 방식에 비해 부족해보이지만, 이 런타임 시점 AOP 방식의 장점은 별도의 추가 자바 설정없이 스프링만 있으면 편리하게 AOP를 사용할 수 있다는 점이다. 자동 프록시 생성같은 기능도 이미 스프링 빈에 등록되어 있고 중요한 부분은 스프링이 제공하는 AOP 기능만으로도 실무의 대부분의 문제를 해결할 수 있다는 점이다.
     *
     * ### AOP 용어 정리
     *
     * - `조인 포인트 (Join point)`
     * 	- 어드바이스가 적용될 수 있는 위치, 메서드 실행, 생성자 호출, 필드 값 접근, 정적 메서드 접근 등 프로그램 실행 중 지점
     * 	- 조인 포인트는 추상적인 개념이다. AOP를 적용할 수 있는 모든 지점이라 생각하면 된다.
     * 	- **스프링 AOP는 프록시 방식을 사용하므로 조인 포인트는 항상 메서드 실행 지점으로 제한된다.**
     *
     * - `포인트컷(Pointcut)`
     * 	- 조인 포인트 중에서 어드바이스가 적용될 위치를 선별하는 기능
     * 	- 주로 AspectJ 표현식을 사용해서 지정
     * 	- 프록시를 사용하는 스프링 AOP는 메서드 실행 지점만 포인트컷으로 선별 가능
     *
     * - `타겟(Target)`
     * 	- 어드바이스를 받는 객체, 포인트컷으로 결정
     * 	- 쉽게 말해서 부가 기능을 적용 할 핵심 기능이 포함되어 있는 객체
     *
     * - `어드바이스(Advice)`
     * 	- 부가 기능
     * 	- 특정 조인 포인트에서 Aspect에 의해 취해지는 조치
     * 	- Around(주변), Before(전), After(후)와 같은 다양한 종류의 어드바이스가 있음
     *
     * - `에스펙트(Aspect)`
     * 	- 어드바이스 + 포인트컷을 모듈화 한 것
     * 	- `@Aspect`를 생각하면 된다.
     * 	- 여러 어드바이스와 포인트컷이 함께 존재
     *
     * - `어드바이저(Advisor)`
     * 	- 하나의 어드바이스와 하나의 포인트컷으로 구성
     * 	- 스프링 AOP에서만 사용되는 특별한 용어
     *
     * - `위빙(Weaving)`
     * 	- 포인트컷으로 결정한 타겟의 조인 포인트에 어드바이스를 적용하는 것
     * 		- 조인 포인트에 어드바이스를 실제로 적용하는 행위
     * 	- 위빙을 통해 핵심 기능 코드에 영향을 주지 않고 부가 기능을 추가할 수 있음
     * 	- AOP 적용을 위해 애스팩트를 객체에 연결한 상태
     * 		- 컴파일 타임(AspectJ compiler)
     * 		- 로드 타임
     * 		- 런타임, 스프링 AOP는 런타임, 프록시 방식
     *
     * - AOP 프록시
     * 	- AOP 기능을 구현하기 위해 만든 프록시 객체, 스프링에서 AOP 프록시는 JDK 동적 프록시 또는 CGLIB 프록시 이다.
     */
}
